<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.accounting.dao.AccountSlipDao">

	<!-- 회계전표 목록 조회 -->
	<select id="accountSlipList" resultType="kr.happyjob.study.accounting.model.AccountSlipModel">
		/*kr.happyjob.study.accounting.dao.accountingDao.accountSlipList*/
		select ai.account_no as account_no
		      ,co.order_cd as order_cd
		      ,co.name as contUserName
		      ,co.contract_date as contContract_date
		      ,co.stotal_price as contTotal_price
		      ,co.account_cd as contAccount_cd
		      ,co.client_name as contClient_name
		      ,co.account_name as contAccount_name
		      ,expe.exp_no as exp_no
		      ,expe.yn_date as expYn_date
		      ,expe.account_cd as exptAccount_cd
		      ,expe.account_name as exptaccount_name 
		      ,expe.name as exptUserName
		      ,expe.exp_spent as expt_spent
		  from tb_account_info ai
		      left outer join (
		                  select con.order_cd order_cd
		                        ,con.contract_no
		                        ,con.contract_date contract_date
		                        ,con.total_price total_price
		                        ,con.loginID loginID
		                        ,ui.name name
		                        ,SUM(con.total_price) stotal_price
		                        ,con.laccount_cd laccount_cd
		                        ,con.account_cd account_cd
		                        ,cli.client_name client_name
		                        ,cli.client_no client_no
		                        ,at.account_name account_name
		                    from tb_contract con
		                         inner join tb_userinfo ui on con.loginID = ui.loginID
		                         inner join tb_account_title at on con.laccount_cd = at.laccount_cd and con.account_cd = at.account_cd 
		                         inner join tb_client cli on con.client_no = cli.client_no
		                    where contract_type = '2'
		                  group by order_cd
		                  ) co on ai.order_cd = co.order_cd
		      left outer join (
		                  select ex.yn_date yn_date
		                        ,ex.exp_no exp_no
		                        ,ex.laccount_cd laccount_cd
		                        ,ex.account_cd account_cd
		                        ,at.account_name account_name
		                        ,ui.name name
		                        ,ex.exp_spent exp_spent
		                    from tb_expense ex
		                        inner join tb_account_title at on ex.laccount_cd = at.laccount_cd and ex.account_cd = at.account_cd
		                        inner join tb_userinfo ui on ex.loginID = ui.loginID
		                   where ex.exp_yn = 'y'
		                  ) expe on ai.exp_no = expe.exp_no
		<where>
			<if test="(client_no != null) and (!client_no.equals(''))">
				and (expe.client_no = #{client_no} or co.client_no =#{client_no})
			</if>
			<if test="(account_cd != null) and (!account_cd.equals(''))">
				and (expe.account_cd = #{account_cd} or co.account_cd =#{account_cd})
			</if>
			<if test="(srcsdate != null) and (!srcsdate.equals(''))">
				 and (co.contract_date <![CDATA[>=]]> #{srcsdate} or expe.yn_date <![CDATA[>=]]> #{srcsdate})
			 </if>
			 <if test="(srcedate != null) and (!srcedate.equals(''))">
				 and (co.contract_date <![CDATA[<=]]> #{srcedate} or expe.yn_date <![CDATA[<=]]> #{srcedate})
			 </if>
		</where>
		where co.order_cd IS NOT NULL or expe.exp_no IS NOT NULL
		group by ai.exp_no,ai.order_cd
		limit #{pageindex}, #{pageSize}
		
		
	</select>
	
	<!-- 공지사항 목록 총 갯수 조회 -->
	<select id="accountSlipListTotalCnt" resultType="int">
		/*kr.happy.study.accounting.dao.accountingDao.accountSlipListTotalCnt*/
		<!-- SELECT COUNT(*) AS tot_cnt FROM tb_notice noti inner join tb_userinfo ui on ui.loginID = noti.loginID -->
		select count(*) total_cnt
		  from (
		        select ai.account_no as account_no
				      ,ai.order_cd as order_cd
				      ,co.name as contUserName
				      ,co.contract_date as contContract_date
				      ,co.stotal_price as contTotal_price
				      ,co.account_cd as contAccount_cd
				      ,co.client_no as contClient_no
				      ,co.client_name as contClient_name
				      ,co.account_name as contAccount_name
				      ,ai.exp_no as exp_no
				      ,expe.yn_date as expYn_date
				      ,expe.account_cd as exptAccount_cd
				      ,expe.account_name as exptaccount_name 
				      ,expe.name as exptUserName
				      ,expe.exp_spent as expt_spent
		    	  from tb_account_info ai
		    		      left outer join (
		    		                  select con.order_cd order_cd
		    		                        ,con.contract_no
		    		                        ,con.contract_date contract_date
		    		                        ,con.total_price total_price
		    		                        ,con.loginID loginID
		    		                        ,ui.name name
		    		                        ,SUM(con.total_price) stotal_price
		    		                        ,con.laccount_cd laccount_cd
		    		                        ,con.account_cd account_cd
		    		                        ,cli.client_no client_no
		    		                        ,cli.client_name client_name
		    		                        ,at.account_name account_name
		    		                    from tb_contract con
		    		                         inner join tb_userinfo ui on con.loginID = ui.loginID
		    		                         inner join tb_account_title at on con.laccount_cd = at.laccount_cd and con.account_cd = at.account_cd 
		    		                         inner join tb_client cli on con.client_no = cli.client_no
		    		                    where contract_type = '2'
		    		                  group by order_cd
		    		                  ) co on ai.order_cd = co.order_cd
		    		      left outer join (
		    		                  select ex.yn_date yn_date
		    		                        ,ex.exp_no exp_no
		    		                        ,ex.laccount_cd laccount_cd
		    		                        ,ex.account_cd account_cd
		    		                        ,at.account_name account_name
		    		                        ,ui.name name
		    		                        ,ex.exp_spent exp_spent
		    		                    from tb_expense ex
		    		                        inner join tb_account_title at on ex.laccount_cd = at.laccount_cd and ex.account_cd = at.account_cd
		    		                        inner join tb_userinfo ui on ex.loginID = ui.loginID
		    		                   where ex.exp_yn = 'y'
		                           group by ex.exp_no
		    		                  ) expe on ai.exp_no = expe.exp_no
		    	<where>
					<if test="(client_no != null) and (!client_no.equals(''))">
						and (expe.client_no = #{client_no} or co.client_no =#{client_no})
					</if>
					<if test="(account_cd != null) and (!account_cd.equals(''))">
						and (expe.account_cd = #{account_cd} or co.account_cd =#{account_cd})
					</if>
					<if test="(srcsdate != null) and (!srcsdate.equals(''))">
						 and (co.contract_date <![CDATA[>=]]> #{srcsdate} or expe.yn_date <![CDATA[>=]]> #{srcsdate})
					 </if>
					 <if test="(srcedate != null) and (!srcedate.equals(''))">
						 and (co.contract_date <![CDATA[<=]]> #{srcedate} or expe.yn_date <![CDATA[<=]]> #{srcedate})
					 </if>
				</where>
				where ai.order_cd IS NOT NULL or expe.exp_no IS NOT NULL
		        group by ai.exp_no, ai.order_cd
		        ) total
	</select>
	
	<!-- 거래처 목록 조회 -->
	<select id="clientlist" resultType="kr.happyjob.study.business.model.BizPartnerModel">
		/*kr.happyjob.study.accounting.dao.accountingDao.clientlist*/
		select client_no
              ,client_name
              ,manager_name
              ,manager_hp
              ,manager_email
              ,fax_tel
              ,client_type
 		 from tb_client
	</select>
	
	<!-- 계정과목 리스트 -->
	<select id="detileAccountList" resultType="kr.happyjob.study.accounting.model.DetileAccountListModel">
		/*kr.happyjob.study.accounting.dao.accountingDao.detileAccountList*/
		select laccount_cd
		      ,account_cd
		      ,account_name
		      ,account_type
		  from tb_account_title
		  <where>
			  <if test="(laccount_cd != null) and (!laccount_cd.equals(''))">
			 		and laccount_cd = #{laccount_cd}
			 </if>
		 </where>
	</select>

	<!-- 제품 리스트 -->
	<select id="productList" resultType="kr.happyjob.study.accounting.model.ProductListModel">
		/*kr.happyjob.study.accounting.dao.accountingDao.productList*/
		select product_no
		      ,lcategory_cd
		      ,mcategory_cd
		      ,product_name
		      ,price
		      ,stock
		  from tb_product
		  <where>
			  <if test="(lcategory_cd != null) and (!lcategory_cd.equals('')) and (mcategory_cd != null) and (!mcategory_cd.equals(''))">
			 		and lcategory_cd = #{lcategory_cd} and mcategory_cd= #{mcategory_cd}
			 </if>
		 </where>
	</select>
	
	<!-- 제품 중분류 리스트 -->
	<select id="midProductList" resultType="kr.happyjob.study.accounting.model.MidProductListModel">
		/*kr.happyjob.study.accounting.dao.accountingDao.midProductList*/
		select lcategory_cd
		      ,mcategory_cd
		      ,product_name
		  from tb_product_type
		  <where>
			  <if test="(lcategory_cd != null) and (!lcategory_cd.equals(''))">
			 		and lcategory_cd = #{lcategory_cd}
			 </if>
		 </where>
	</select>
	
	<!-- 공지사항 신규 저장 -->
	<insert id="hnoticenewsave">
	/*kr.happyjob.study.hwang.dao.HnoticeDao.hnoticenewsave*/
	  <selectKey keyProperty="noticeno" resultType="int" order="BEFORE"> 
	   	SELECT IFNULL(MAX(notice_no),0) +1
				  FROM tb_notice
	  </selectKey>
		insert 
		into tb_notice
		 	  (
		 		notice_no
		       ,loginID
		       ,notice_title
		       ,notice_date
		       ,notice_det
		       ,file_name
		       ,file_size
		       ,file_nadd
		       ,file_madd
		 		)
		 values(
		 		#{noticeno}
		 		,#{loginID}
		 		,#{notice_title}
		 		,DATE_FORMAT(now(), '%Y-%m-%d')
		 		,#{notice_det}
		 		,#{file_name}
		 		,#{file_size}
		 		,#{file_nadd}
		 		,#{file_madd}
		 		)
	</insert>

	<!-- 회계전표 단건 조회 -->
	<update id="hnoticesave">
	/*kr.happyjob.study.hwang.dao.HnoticeDao.hnoticesave*/
		update tb_notice
		   set loginID = #{loginID}
		       ,notice_title = #{notice_title}
		       ,notice_det = #{notice_det}
		       ,file_name = #{fileInfo.file_nm}
		       ,file_size = #{fileInfo.file_size} 
		       ,file_nadd = #{fileInfo.file_nadd}
		       ,file_madd = #{fileInfo.file_loc}
		 where notice_no = #{notice_no}
	</update>
	
	<!-- 공지사항 단건조회 -->
	<select id="detailone" resultType="kr.happyjob.study.hwang.model.HnoticeModel">
	
	/*kr.happyjob.study.hwang.dao.HnoticeDao.detailone*/
		select noti.notice_no
		      ,noti.loginID
		      ,ui.name as writer
		      ,noti.notice_title
		      ,noti.notice_date
		      ,noti.notice_det
		      ,noti.file_name
		      ,noti.file_size
		      ,noti.file_nadd
		      ,noti.file_madd
		FROM tb_notice noti
		 	 inner join tb_userinfo ui on ui.loginID = noti.loginID
		where noti.notice_no = #{notice_no}
	</select>

	<delete id="hnoticedelete">
	
	/*kr.happyjob.study.hwang.dao.HnoticeDao.hnoticedelete*/
		delete
		FROM tb_notice 
		where notice_no = #{notice_no}
	</delete>
	
</mapper>